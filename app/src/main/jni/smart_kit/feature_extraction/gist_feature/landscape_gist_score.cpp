#include "landscape_gist_score.h"
namespace smart {

static const float  weights_32_884_1[320] = { -1.310252, -4.397121, 0.005923, 1.135596, -3.413812, -4.747136, -1.725011, -1.226027, -4.023511, -0.498562, 0.001728, -3.751715, -4.457956, -2.392895, -3.369477, -0.972977, -1.101895, 0.488483, 1.000758, 1.685239, -1.651512, -2.819951, -1.654724, 0.254061, -4.057789, -1.586804, 1.496588, 0.499082, -2.105811, 2.227038, 1.417769, 0.782701, 0.430723, 1.115967, 0.068444, 0.532408, 0.137623, 3.657218, 0.292650, 1.546289, 1.437250, -2.403393, 2.022802, 0.020337, 0.965401, -0.736093, 0.088027, 5.294268, 0.036575, 1.441348, 1.741960, -0.765143, 2.500446, -1.959684, -1.418007, 0.089873, 1.531475, -1.347666, -1.513673, -0.752448, -0.617437, 1.660742, -2.728071, 0.731936, -1.230310, 1.037459, 1.744430, 2.159418, -1.196518, 2.288103, 0.993555, -0.385012, -1.433325, 0.154606, -0.480896, 0.250096, -0.246283, -1.072459, 3.249597, 1.276211, -4.163897, -3.943543, -1.657651, -1.151414, 1.725976, 1.108955, -0.668222, 2.655372, 1.618888, 1.991691, -1.933469, -0.707738, -0.433952, 2.025720, -0.855078, -2.539962, -0.489876, 1.106997, 1.917120, 1.694228, 2.556756, -0.281905, 0.668930, 2.818374, 0.407062, 4.050641, -0.489904, 1.178391, -0.444199, -0.223871, 0.509582, 2.665547, -4.108670, -0.754571, 1.344660, 1.806820, -1.040113, -1.417816, 0.206726, 1.472893, -1.642827, -0.694498, -0.906103, 0.547964, -1.321643, -1.843956, -0.868546, 2.605735, 0.848853, 0.137346, 0.358205, 0.182525, 1.188634, -0.556386, 3.607596, 0.249430, 1.044136, 0.454147, 1.838461, 1.155307, 4.472953, -1.525280, -1.881535, -0.056105, 1.343200, -0.402506, -0.291856, -0.645364, -2.247207, -0.729927, -0.441200, -0.401330, -0.013395, -0.306604, -1.352101, 1.333423, -2.961464, 1.650458, -1.492763, -1.794631, -0.842425, 1.365144, -0.334550, -0.188059, -1.048549, 2.438339, -1.685457, -0.237026, -0.550099, 0.268203, -0.960905, -1.402802, -4.327559, 1.046897, 0.635040, -1.753672, -0.730399, -0.408543, -1.272974, -0.215573, -0.540422, 0.332551, 1.446819, -1.473745, -0.858609, 1.713145, -0.629324, 0.905503, 0.245860, -2.288914, 1.750433, -1.707989, 2.947453, 1.415625, -0.257149, 1.011486, -0.844625, 1.261254, -0.660919, -0.552141, -2.564562, -0.634347, -0.953801, 1.549360, 1.728075, 1.071159, -0.025030, 0.350010, -1.278576, -2.683771, 4.085382, 1.329812, 1.939127, -1.300006, -0.098274, -2.352906, -1.182527, -2.020023, 2.205611, 0.246424, 1.336474, -0.063347, 0.982853, 0.151158, -0.841872, 0.763942, -0.212019, -0.247232, 2.752073, -0.912903, -0.318684, -1.314591, -0.767554, 1.585242, -1.410269, -2.076771, -0.031332, -1.721888, 0.207442, -1.389060, -0.175320, 2.362048, -2.613994, -1.687829, 2.159251, 0.591017, -0.927825, -0.278783, 0.656940, -1.577199, -2.846428, -0.142043, 1.065395, -1.110396, -0.507116, 0.331049, 2.687020, -0.175223, 0.066036, -2.234127, -0.430719, -1.195251, -0.315649, 0.230849, -2.936553, -1.587401, -1.684697, 2.289147, 0.139270, 0.551997, 0.716045, 2.453339, -2.585050, -0.028056, 0.196324, -1.031903, 0.021220, -0.926088, -0.346805, -0.798408, -0.332671, -2.666189, 2.907870, 0.785229, -2.686897, -1.004879, -0.634671, 2.062440, 0.526877, -0.765976, 0.817496, 0.512809, 2.863719, 1.762812, -0.209995, -1.140474, 1.428489, 0.971141, 1.100072, -0.916371, 2.938927, 1.980934, 2.269857, -0.412827, -2.876048, 0.746006, 1.264068, 1.042790, 0.895438, -0.921146, 0.144258, -0.639457, -0.208003, 0.008163, -1.111001, -0.547335, 0.738085, 1.163483, -1.461880, -0.262766
};
static const float  weights_32_884_2[320] = { -1.511317, -3.560370, 0.641995, 1.314167, -3.075830, -4.035040, -1.871479, -0.245445, -3.794493, -2.563926, -0.080475, 0.016291, -2.817715, -2.072147, -1.418827, -0.129878, -1.928202, -0.984456, 0.186701, 0.629337, -1.251947, -2.035388, -1.592217, 0.107809, -2.097892, -0.988042, -0.249950, 1.044965, -1.266303, -0.610935, -0.052862, -0.195070, 1.377814, 0.803886, 0.496540, 0.881297, 0.064305, 3.123324, 0.960418, 0.182537, -0.247011, 0.341534, 1.268922, -0.498393, -0.129483, -0.979638, -0.930275, 3.187671, -0.670860, 1.206166, 0.714569, 0.392918, 0.903134, 1.925473, -0.878268, 1.271895, -0.457186, 0.867185, -0.641800, 0.005785, -1.060005, 0.348481, 0.587786, 1.018918, -1.333352, -0.754287, 2.047477, 2.452756, -1.648295, -0.435311, -0.090447, 0.967420, -1.512310, -0.715249, 0.367437, -1.201425, -1.153718, 0.976246, 3.887008, 1.617928, -1.457497, -2.232532, -0.425559, -0.007696, 0.341690, -0.121218, -1.271778, 0.828237, -0.362362, 1.156275, -2.095062, -0.191385, -0.143205, 1.760033, -0.273577, -0.054387, 0.134671, -0.328630, 0.870736, 3.275761, 0.467981, 0.084682, 1.443347, 3.277088, 0.541450, 1.788169, 0.195409, 1.481581, 0.999610, -0.037985, 0.365252, 0.592921, -0.739926, -0.790284, 0.870785, 2.276514, -1.470193, -1.207982, -0.279813, 1.762712, -2.345183, -1.050120, -1.086845, 0.413305, -1.515398, -1.055015, -0.425116, 0.928462, 0.475501, -0.213140, -0.349363, 0.438182, -1.626426, -0.063261, 0.935525, 1.043328, -1.576637, -0.873669, 1.473590, -0.358605, -0.176150, -2.070714, -3.009891, 0.337451, 0.176381, 0.493629, -1.096798, -1.663814, -2.109938, -0.322281, -0.102693, 0.088363, -0.426064, -0.170909, -0.468752, 0.699915, -1.742079, 0.822643, 0.575845, -1.300020, 0.773157, 1.684942, -0.803796, -0.237232, -0.806958, 0.599995, -0.402009, -0.685737, 0.505849, -0.268447, -1.730888, -0.209366, -1.822743, 0.367230, -0.409592, 1.067942, 0.875539, 0.887201, -0.219239, -2.310905, -0.086168, 1.364315, -0.202824, -2.572227, 1.217796, 2.125787, -0.792470, 0.732185, -0.539873, -0.422234, 0.063917, -0.798788, 0.046989, 1.115194, 1.564538, 2.708377, -1.183179, 0.655272, 0.811107, -0.587768, -0.503339, 0.329535, 0.437028, 0.710966, -0.319583, -0.297701, 0.429301, 0.178153, -0.488739, -1.314193, 1.080977, -0.642733, 1.736164, -0.946545, -1.528829, -1.373436, -0.305829, 0.787405, 0.709061, -0.884041, 0.800446, 1.730618, 0.160781, -0.251092, -0.616358, 0.247915, -0.292720, -0.384365, 0.452117, 0.645164, 0.590883, -1.015251, -0.306780, 0.138429, -1.441172, 0.155312, 0.504362, -1.017579, 0.928267, -1.981875, 0.089842, -0.446560, -0.953581, -1.573901, 0.633629, -0.225541, -0.703859, -0.096115, -0.439420, -1.788621, -1.732394, -1.741209, 0.216254, -1.361997, -0.647183, 0.159877, 0.447100, 0.321363, -0.683069, -1.661475, -1.689463, -1.111594, 0.017385, -0.123376, -1.952275, -0.905651, -0.998391, 0.862474, 1.001822, -0.509186, -0.209378, 2.042487, -0.962578, 0.204666, 1.022180, -0.878934, -1.204547, -0.630061, -0.016637, -0.771404, -1.636518, -0.941629, -0.615621, 0.576058, -0.573685, -0.192985, 0.199941, 1.111631, -0.242758, 1.129970, 1.839204, 1.343127, 2.974183, 1.748723, 0.062239, 0.438542, 2.163464, 1.705265, -0.355810, -0.845813, 1.670690, 2.356529, 1.377596, -0.012899, -0.105984, 1.738086, -0.562310, -0.247709, 1.107281, -0.123933, -1.074928, 0.502166, 1.129333, 0.239973, -1.210990, -0.322768, 2.339340, 1.574630, 1.954097, -0.251141
};


void transpose0(unsigned char *src, int height, int width, unsigned char *dst);
void transpose90(unsigned char *src, int height, int width, unsigned char *dst);
void transpose180(unsigned char *src, int height, int width, unsigned char *dst);
float computeScore(float *gist, const float *weights1, const float *weights2, int len);

LandscapeGistScore::LandscapeGistScore()
{
	gist_feature_ = new GistFeature();

	int nblocks = 4;
	int n_scale = 3;

	std::vector<int> orientations_per_scale;
	orientations_per_scale.resize(3);
	orientations_per_scale[0] = 8;
	orientations_per_scale[1] = 8;
	orientations_per_scale[2] = 4;
	 height_ = 32;
	 width_ = 32;
	 imageData_ = new unsigned char[height_ * width_];

	 feature_length_ = 0;
	 /* compute descriptor size */
	 for (int i = 0; i < n_scale; i++)
		 feature_length_ += nblocks*nblocks*orientations_per_scale[i];

	gist_feature_->set_parameters(nblocks, n_scale, orientations_per_scale);
}

LandscapeGistScore::~LandscapeGistScore()
{
	delete gist_feature_;
	delete imageData_;
}

float LandscapeGistScore::compute_gist_score(unsigned char* input_image_data, int width, int height, int orientation)
{
	float *gist_feature_data;
	switch (orientation)
	{
	case 0:
		transpose0(input_image_data, height, width, imageData_);
		gist_feature_data = gist_feature_->do_extraction(imageData_, height_, width_);
		break;

	case 90:
		transpose90(input_image_data, height, width, imageData_);
		gist_feature_data = gist_feature_->do_extraction(imageData_, height_, width_);
		break;

	case 180:
		transpose180(input_image_data, height, width, imageData_);
		gist_feature_data = gist_feature_->do_extraction(imageData_, height_, width_);
		break;
	default:
		gist_feature_data = gist_feature_->do_extraction(input_image_data, height_, width_);
		break;
	}
	if(gist_feature_data != NULL)
		gist_score_ = computeScore(gist_feature_data, weights_32_884_1, weights_32_884_2, feature_length_);
	else
		gist_score_ = 0;

	return gist_score_;
}

float LandscapeGistScore::get_score()
{
	return gist_score_;
}


float computeScore(float *gist, const float *weights1, const float *weights2, int len)
{
	float score1 = 0;
	float score2 = 0;
	float sumFeat = 0;
	for (int i = 0; i < len; i++)
	{
		score1 += gist[i] * weights1[i];
		score2 += gist[i] * weights2[i];
		sumFeat += gist[i] * gist[i];
	}
	if (sumFeat > 0)
	{
		score1 = score1 / sqrt(sumFeat);
		score2 = score2 / sqrt(sumFeat);
	}
	score1 = 1 / (1 + exp(-1 * score1));
	score2 = 1 / (1 + exp(-1 * score2));
	float finalScore = (score1 + score2) / 2.0;
	return finalScore;
}


void transpose0(unsigned char *src, int height, int width, unsigned char *dst)
{
	int m, n;
	for (m = 0; m < width; m++)
	{
		for (n = 0; n < height; n++)
		{
			dst[m*height + n] = src[(height - 1 - n)*width + m];
		}
	}
}

void transpose90(unsigned char *src, int height, int width, unsigned char *dst)
{
	int m, n;
	memset(dst, 0, height*width*sizeof(unsigned char));
	for (m = 0; m < height; m++)
	{
		for (n = 0; n < width; n++)
		{
			dst[m*width + n] = src[(height - 1 - m)*width + width - 1 - n];
		}
	}
}

void transpose180(unsigned char *src, int height, int width, unsigned char *dst)
{
	int m, n;
	for (m = 0; m < width; m++)
	{
		for (n = 0; n < height; n++)
		{
			dst[m*height + n] = src[n*width + width - 1 - m];
		}
	}
}


} /* namespace smart */

